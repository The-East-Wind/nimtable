/**
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("CatalogAPIApi", () => {
  let instance: api.CatalogAPIApi
  beforeEach(function() {
    instance = new api.CatalogAPIApi(config)
  });

  test("cancelPlanning", () => {
    return expect(instance.cancelPlanning({})).resolves.toBe(null)
  })
  test("commitTransaction", () => {
    const body: api.CommitTransactionRequest = undefined
    return expect(instance.commitTransaction(body, {})).resolves.toBe(null)
  })
  test("createNamespace", () => {
    const body: api.CreateNamespaceRequest = undefined
    return expect(instance.createNamespace(body, {})).resolves.toBe(null)
  })
  test("createTable", () => {
    const body: api.CreateTableRequest = undefined
    const xIcebergAccessDelegation: any = undefined
    return expect(instance.createTable(body, xIcebergAccessDelegation, {})).resolves.toBe(null)
  })
  test("createView", () => {
    const body: api.CreateViewRequest = undefined
    return expect(instance.createView(body, {})).resolves.toBe(null)
  })
  test("dropNamespace", () => {
    return expect(instance.dropNamespace({})).resolves.toBe(null)
  })
  test("dropTable", () => {
    const prefix: any = undefined
    const namespace: any = undefined
    const table: any = undefined
    const purgeRequested: any = undefined
    return expect(instance.dropTable(prefix, namespace, table, purgeRequested, {})).resolves.toBe(null)
  })
  test("dropView", () => {
    return expect(instance.dropView({})).resolves.toBe(null)
  })
  test("fetchPlanningResult", () => {
    return expect(instance.fetchPlanningResult({})).resolves.toBe(null)
  })
  test("fetchScanTasks", () => {
    const body: api.FetchScanTasksRequest = undefined
    return expect(instance.fetchScanTasks(body, {})).resolves.toBe(null)
  })
  test("listNamespaces", () => {
    const pageToken: PageToken = undefined
    const pageSize: any = undefined
    const parent: any = undefined
    return expect(instance.listNamespaces(pageToken, pageSize, parent, {})).resolves.toBe(null)
  })
  test("listTables", () => {
    const pageToken: PageToken = undefined
    const pageSize: any = undefined
    return expect(instance.listTables(pageToken, pageSize, {})).resolves.toBe(null)
  })
  test("listViews", () => {
    const pageToken: PageToken = undefined
    const pageSize: any = undefined
    return expect(instance.listViews(pageToken, pageSize, {})).resolves.toBe(null)
  })
  test("loadCredentials", () => {
    return expect(instance.loadCredentials({})).resolves.toBe(null)
  })
  test("loadNamespaceMetadata", () => {
    return expect(instance.loadNamespaceMetadata({})).resolves.toBe(null)
  })
  test("loadTable", () => {
    const xIcebergAccessDelegation: any = undefined
    const ifNoneMatch: any = undefined
    const snapshots: any = undefined
    return expect(instance.loadTable(xIcebergAccessDelegation, ifNoneMatch, snapshots, {})).resolves.toBe(null)
  })
  test("loadView", () => {
    return expect(instance.loadView({})).resolves.toBe(null)
  })
  test("namespaceExists", () => {
    return expect(instance.namespaceExists({})).resolves.toBe(null)
  })
  test("planTableScan", () => {
    const body: api.PlanTableScanRequest = undefined
    return expect(instance.planTableScan(body, {})).resolves.toBe(null)
  })
  test("registerTable", () => {
    const body: api.RegisterTableRequest = undefined
    return expect(instance.registerTable(body, {})).resolves.toBe(null)
  })
  test("renameTable", () => {
    const body: api.RenameTableRequest = {
  "$ref" : "#/components/examples/RenameTableSameNamespace"
}
    return expect(instance.renameTable(body, {})).resolves.toBe(null)
  })
  test("renameView", () => {
    const body: api.RenameTableRequest = {
  "$ref" : "#/components/examples/RenameViewSameNamespace"
}
    return expect(instance.renameView(body, {})).resolves.toBe(null)
  })
  test("replaceView", () => {
    const body: api.CommitViewRequest = undefined
    return expect(instance.replaceView(body, {})).resolves.toBe(null)
  })
  test("reportMetrics", () => {
    const body: api.ReportMetricsRequest = undefined
    return expect(instance.reportMetrics(body, {})).resolves.toBe(null)
  })
  test("tableExists", () => {
    return expect(instance.tableExists({})).resolves.toBe(null)
  })
  test("updateProperties", () => {
    const body: api.UpdateNamespacePropertiesRequest = {
  "$ref" : "#/components/examples/UpdateAndRemoveNamespacePropertiesRequest"
}
    return expect(instance.updateProperties(body, {})).resolves.toBe(null)
  })
  test("updateTable", () => {
    const body: api.CommitTableRequest = undefined
    return expect(instance.updateTable(body, {})).resolves.toBe(null)
  })
  test("viewExists", () => {
    return expect(instance.viewExists({})).resolves.toBe(null)
  })
})

describe("ConfigurationAPIApi", () => {
  let instance: api.ConfigurationAPIApi
  beforeEach(function() {
    instance = new api.ConfigurationAPIApi(config)
  });

  test("getConfig", () => {
    const warehouse: any = undefined
    return expect(instance.getConfig(warehouse, {})).resolves.toBe(null)
  })
})

describe("OAuth2APIApi", () => {
  let instance: api.OAuth2APIApi
  beforeEach(function() {
    instance = new api.OAuth2APIApi(config)
  });

  test("getToken", () => {
    return expect(instance.getToken({})).resolves.toBe(null)
  })
})

